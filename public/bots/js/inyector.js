
var w1_id = '123456A';
var w2_id = '123456B';
var w3_id = '123456C';
var w4_id = '123456D';
var A = '0001';
var B = '0002';
var C = '0003';
var D = '0004';

function co2(id, ppm) {
	return {
		identifier: id,
		ppm: ppm
	};
}

function wind(id, info) {
	return {
		identifier: id,
		velocity: info[0],
		unit: 'm/s',
		direction: info[1]
	};
}

function co2Group(v1, v2, v3, v4) {
	return [
		co2(A, v1), 
		co2(B, v2), 
		co2(C, v3), 
		co2(D, v4), 
	];
}

function windGroup(v1, v2, v3, v4) {
	return [
		wind(w1_id, v1), 
		wind(w2_id, v2), 
		wind(w3_id, v3), 
		wind(w4_id, v4), 
	];
}
function group(g1, g2) {
	return {
		co2: g1, wind:g2
	};
}

function measure(identifier, ppm, w_dir, w_vel) {
	return {
		id: identifier,
		ppm: ppm,
		w_vel: w_dir,
		w_dir: w_vel
	};
}
// // restart database firsr
 $.ajax({
 	'url': "http://localhost/v1/reset-all-database-tables",
 	type: 'GET',
   dataType: 'json',
   cache: false,
   async: false,
   success: function (data) {
 		console.warn("######################################################")  	
		
 		console.warn(data);

 		console.warn("___________ALL DATABASE VALUES RESETED_______________") 

 		console.warn("######################################################")   	
   }
 });



/*
	group (A, B, C, D)

	A----------B
  |          |
  |          |
	C----------D

	     N
	  O--|--E
	     S

*/
// Primer caso  1 fuente 1 sensor, velocidad de viento estable 10m/s, direction N - NO predominante
var measure = {
	packages: [
		// group(co2Group(10, 10,100,10),  windGroup([10, , [20, ''], [10, , [10, ) , 'n'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 300,  2, 'o'),
	measure(D, 300,  2, 'o'),
	measure(D, 300,  2, 'o'),
	measure(D, 300,  2, 'o'),
	measure(D, 300,  2, 'o'),
	measure(D, 300,  2, 'o'),
	measure(D, 300,  2, 'o'),
	measure(D, 300,  2, 'o'),
	measure(D, 300,  2, 'o'),
	measure(D, 300,  2, 'o'),
	measure(D, 300,  2, 'o'),
	measure(D, 300,  2, 'o'),
	measure(D, 300,  30, 'o'),
	measure(D, 300,  30, 'o'),
	measure(D, 300,  30, 'o'),
	measure(D, 300,  30, 'o'),
	measure(D, 300,  30, 'o'),
	measure(D, 300,  30, 'o'),
	measure(D, 300,  30, 'o'),
	measure(D, 300,  30, 'o'),
	measure(D, 300,  30, 'o'),
	measure(D, 300,  30, 'o'),
	measure(D, 300,  30, 'o'),
	measure(D, 300,  30, 'o'),
	measure(D, 300,  30, 'o'),
	measure(D, 300,  30, 'o'),
	measure(D, 300,  30, 'o'),
	measure(D, 300,  30, 'o'),
	measure(D, 300,  30, 'o'),
	measure(D, 1000,  34, 'o'),
	measure(D, 1000,  34, 'o'),
	measure(D, 1000,  34, 'o'),
	measure(D, 1000,  34, 'o'),
	measure(D, 1000,  34, 'o'),
	measure(D, 1000,  34, 'o'),
	measure(D, 1000,  66, 'o'),
	measure(D, 1000,  66, 'o'),
	measure(D, 1000,  66, 'o'),
	measure(D, 1000,  66, 'o'),
	measure(D, 1000,  66, 'o'),
	measure(D, 1000,  66, 'o'),
	measure(D, 1000,  66, 'o'),
	measure(D, 1000,  66, 'o'),
	measure(D, 1000,  66, 'o'),
	measure(D, 1000,  66, 'o'),
	measure(D, 1000,  66, 'o'),
	measure(D, 1000,  66, 'o'),
	measure(D, 1000,  66, 'o'),
	measure(D, 1000,  15, 'o'),
	measure(D, 1000,  15, 'o'),
	measure(D, 1000,  15, 'o'),
	measure(D, 1000,  15, 'o'),
	measure(D, 1000,  15, 'o'),
	measure(D, 1000,  15, 'o'),
	measure(D, 1000,  15, 'o'),
	measure(D, 9000,  15, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  30, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  60, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 9000,  10, 'o'),
	measure(D, 1500,  10, 'o'),
	measure(D, 1500,  10, 'o'),
	measure(D, 1500,  10, 'o'),
	measure(A, 903,  10, 'n'),
	measure(A, 903,  10, 'n'),
	measure(A, 500,  10, 'n'),
	measure(A, 500,  10, 'n'),
	measure(A, 903,  10, 'n'),
	measure(A, 800,  10, 'n'),
	measure(A, 8000,  10, 'n'),
	measure(A, 8000,  10, 'n'),
	measure(A, 100,  10, 'n'),
	measure(A, 10000,  10, 'n'),
	measure(A, 10000,  10, 'n'),
	measure(A, 10000,  10, 'n'),
	measure(A, 10000,  10, 'n'),
	measure(A, 10000,  10, 'n'),
	measure(A, 10000,  10, 'n'),
	measure(A, 10000,  10, 'n'),	
	measure(A, 10000,  10, 'n'),
	measure(A, 10000,  70, 'n'),
	measure(A, 10000,  70, 'n'),
	measure(A, 10000,  70, 'n'),
	measure(A, 10000,  70, 'n'),
	measure(A, 10000,  70, 'n'),
	measure(A, 10000,  70, 'n'),
	measure(A, 10000,  70, 'n'),
	measure(A, 10000,  70, 'n'),
	measure(A, 10000,  70, 'n'),
	measure(A, 10000,  70, 'n'),
	measure(A, 10000,  70, 'n'),
	measure(A, 10000,  70, 'n'),
	measure(A, 10000,  70, 'n'),
	// measure(A, 10000,  70, 'n'),
	// measure(A, 10000,  70, 'n'),
	// measure(A, 10000,  70, 'n'),
	// measure(A, 10000,  70, 'n'),
	// measure(A, 10000,  70, 'n'),
	// measure(A, 10000,  70, 'n'),
	// measure(A, 10000,  70, 'n'),
	// measure(A, 10000,  70, 'n'),
	// measure(A, 10000,  70, 'n'),
	// measure(A, 10000,  70, 'n'),
	// measure(A, 10000,  70, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 0,  0, 'n'),
	// measure(A, 0,  0, 'n'),
	// measure(A, 0,  0, 'n'),
	// measure(A, 0,  0, 'n'),
	// measure(A, 0,  0, 'n'),
	// 	measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// measure(A, 300,  20, 'n'),
	// 	measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 400,  40, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// measure(A, 10000,  10, 'n'),
	// 	measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
	// measure(C, 8000,  10, 'n'),
		
	]
};
